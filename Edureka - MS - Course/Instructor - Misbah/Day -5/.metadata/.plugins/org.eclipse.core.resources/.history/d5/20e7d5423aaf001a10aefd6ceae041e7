package com.in28minutes.microservices.concurrenyconversionservice.controllers;

import java.math.BigDecimal;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.Queue;
import javax.jms.Session;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.in28minutes.microservices.concurrenyconversionservice.beans.ConcurrenyConversionBean;

@RestController
public class ConcurrenyConversionController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ConcurrenyConversionController.class);
	
	@Value("${server.port}")
	private int port;
	
	@Autowired
	private JmsTemplate jmsTemplate;

	@Autowired
	@Qualifier("currency-exchange-queue")
	private Queue currencyExchangeQueue;
	
	
	@Autowired
	@Qualifier("currency-conversion-queue")
	private Queue currencyConversionQueue;
	
	
	@GetMapping(value="/currencyConversion/from/{from}/to/{to}/quantity/{quantity}")
	private ResponseEntity<ConcurrenyConversionBean> convertConcurreny(@PathVariable("from") String from,@PathVariable("to") String to,@PathVariable("quantity") BigDecimal quantity) {
	
		return ResponseEntity.ok(new ConcurrenyConversionBean(10009L, from, to, 
				BigDecimal.valueOf(78.90), quantity, (quantity.multiply(BigDecimal.valueOf(78.90))), port));
		
	}
	
	@GetMapping(value="/currencyConversionQueue/from/{from}/to/{to}/quantity/{quantity}")
	private ResponseEntity<ConcurrenyConversionBean> convertConcurrenyMessaging(@PathVariable("from") String from,@PathVariable("to") String to,@PathVariable("quantity") BigDecimal quantity) throws JMSException {
	
		LOGGER.info(" concurrency conversion controller .............  response is ............................");
		
		jmsTemplate.convertAndSend(currencyExchangeQueue, from+"#"+to);
		
		//Message message = 	jmsTemplate.receive(currencyConversionQueue);
		
		/*Message message = jmsTemplate.sendAndReceive(currencyExchangeQueue, new MessageCreator() {
			
			@Override
			public Message createMessage(Session session) throws JMSException {
				return session.createTextMessage(from+"#"+to);
			}
		});
		*/
	//	String response = message.getBody(String.class);
		
		/*LOGGER.info("response received from queue is {} ",response);
		ConcurrenyConversionBean newBean = new ConcurrenyConversionBean(1L,from,to,
				new BigDecimal(response),quantity,quantity.multiply(new BigDecimal(response)),0000);
		*/
		return ResponseEntity.ok(null);
	}
	
	/*
	 * @JmsListener(destination = "concurreny-exchange-queue") private String
	 * retreiveValueFromQueue(String exchangeValue) {
	 * LOGGER.info("receive exchange value from queueu......... {} ",exchangeValue);
	 * return exchangeValue; }
	 */
	
	
}
