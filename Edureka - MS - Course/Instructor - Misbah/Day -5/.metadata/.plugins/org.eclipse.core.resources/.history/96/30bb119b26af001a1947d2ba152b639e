package com.in28minutes.microservices.concurrenyconversionservice.controllers;

import java.math.BigDecimal;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.in28minutes.microservices.concurrenyconversionservice.beans.ConcurrenyConversionBean;

@RestController
public class ConcurrenyConversionController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ConcurrenyConversionController.class);
	
	@Value("${server.port}")
	private int port;
	
	
	@GetMapping(value="/concurrenyConversion/from/{from}/to/{to}/quantity/{quantity}")
	private ResponseEntity<ConcurrenyConversionBean> convertConcurreny(@PathVariable("from") String from,@PathVariable("to") String to,@PathVariable("quantity") BigDecimal quantity) {
	
		return ResponseEntity.ok(new ConcurrenyConversionBean(10009L, from, to, 
				BigDecimal.valueOf(78.90), quantity, (quantity.multiply(BigDecimal.valueOf(78.90))), port));
		
	}
	
	@GetMapping(value="/concurrenyConversionQueue/from/{from}/to/{to}/quantity/{quantity}")
	@JmsListener(destination = "concurreny-exchange-queue")
	private ResponseEntity<ConcurrenyConversionBean> convertConcurrenyFeign(@PathVariable("from") String from,@PathVariable("to") String to,@PathVariable("quantity") BigDecimal quantity) {
	
		LOGGER.info(" concurrency conversion controller .............  response is ............................");
		
		ConcurrenyConversionBean newBean = new ConcurrenyConversionBean(,from,to,
				response.getConversionMultiple(),quantity,quantity.multiply(response.getConversionMultiple()),response.getPort());
		
		return ResponseEntity.ok(newBean);
	}
	
	/*
	 * @JmsListener(destination = "concurreny-exchange-queue") private String
	 * retreiveValueFromQueue(String exchangeValue) {
	 * LOGGER.info("receive exchange value from queueu......... {} ",exchangeValue);
	 * return exchangeValue; }
	 */
	
	
}
